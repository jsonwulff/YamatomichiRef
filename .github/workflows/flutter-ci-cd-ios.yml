# name: iOS build and test

# on:
#   push:
#     branches: [ main ]
#   pull_request:
#     branches: [ main ]

#   # Allows you to run this workflow manually from the Actions tab
#   workflow_dispatch:

# # Build iOS
# jobs:
#   build-and-test-ios:
#     # Creates a build matrix for your jobs. You can define different
#     # variations of an environment to run each job in.
#     strategy:
#       # A set of different configurations of the virtual  
#       # environment.
#       matrix:
#         device:
#         - "iPhone 8 (13.1)"
#         - "iPhone 11 Pro Max (13.1)"
#       # When set to true, GitHub cancels all in-progress jobs if any        
#       # matrix job fails.
#       fail-fast: false
  
#     runs-on: macos-latest
#     steps:
#       - uses: actions/checkout@v1
#       - name: setup java

#     # Setup java
#         uses: actions/setup-java@v1
#         with:
#           java-version: '12.x'
      
#       - uses: subosito/flutter-action@v1
#         with:
#           channel: 'stable' # 'dev', 'alpha', 'beta'
#           # flutter-version: '1.12.x' # you can also specify exact version of flutter

#       - name: Get dependencies
#         run: flutter pub get
      
#       # # Static code analysis
#       # - name: Analyze code
#       #   run: flutter analyze .
      
#       # # Run unit and widget tests
#       # - name: Run tests
#       #   run: flutter test

#       - name: List simulators
#         run: xcrun instruments -s

#       - name: Start simulator
#         run: |
#           UDID=$(
#             xcrun instruments -s |
#             awk \
#               -F ' *[][]' \
#               -v 'device=${{ matrix.device }}' \
#               '$1 == device { print $2 }'
#           )
#           xcrun simctl boot "${UDID:?No Simulator with this name found}"
      
#       - name: Run integration tests
#         run: flutter drive --driver=test_driver/integration_test.dart --target=integration_test/sign_in_test.dart

#   #     # Build the ios ipa
#   #     - name: Build iOS App         
#   #       run: |
#   #         flutter build ios --release --no-codesign
#   #         cd build/ios/iphoneos
#   #         mkdir Payload
#   #         cd Payload
#   #         ln -s ../Runner.app
#   #         cd ..
#   #         zip -r app.ipa Payload
          
#   #     - name: Upload artifact to action
#   #       uses: actions/upload-artifact@v1
#   #       with:
#   #         name: release.ipa
#   #         path: build/ios/iphoneos/app.ipa

#   # ipa-deploy-firebase:
#   #   needs: build-and-test-ios
#   #   runs-on: ubuntu-latest

#   #   steps:          
#   #     - uses: actions/checkout@v1

#   #     - uses: actions/download-artifact@v1
#   #       with:
#   #         name: release.ipa
          
#   #     - name: testing path
#   #       run: ls
      
#   #     - name: upload artifact to Firebase App Distribution
#   #       uses: wzieba/Firebase-Distribution-Github-Action@v1
#   #       with:
#   #         appId: ${{secrets.IOS}} 
#   #         token: ${{secrets.FIREBASE_TOKEN}} 
#   #         groups: testers
#   #         file: release.ipa